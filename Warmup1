Warmup1> sleep_in:

The parameter weekday is True if it is a weekday, 
and the parameter vacation is True if we are on vacation. 
We sleep in if it is not a weekday or we're on vacation. 
Return True if we sleep in.

def sleep_in(weekday, vacation):
  if not weekday or vacation:
    return True
  else:
    return False
   
   
Warmup1> monkey_trouble

We have two monkeys, a and b, and the parameters a_smile and b_smile indicate if each is smiling. 
We are in trouble if they are both smiling or if neither of them is smiling. 
Return True if we are in trouble.

#so we need when it is true and when it is false: 
#if: both monkeys are smiling then we have trouble
#elif: if either or them is smiling and the other not

if a_smile == b_smile:
  return True
elif a_smile != b_smile:
  return False


Warmup1> sum_double

Given two int values, return their sum. 
Unless the two values are the same, then return double their sum.

sum_double(a,b)
sum_double(1, 2) → 3
sum_double(3, 2) → 5
sum_double(2, 2) → 8

#we want to return (a+b)*2 when a == b, if not we return a+b
return (a+b)*2 if a == b else a+b


Warmup1> diff21

Given an int n, return the absolute difference between n and 21, 
except return double the absolute difference if n is over 21.

diff21(19) → 2
diff21(10) → 11
diff21(21) → 0
# returning abs(21-n)*2 if n>21 else 21-n
return abs(21-n)*2 if n > 21 else abs(21-n)

Warmup1>parrot_trouble

We have a loud talking parrot. The "hour" parameter is the current hour time in the range 0..23. 
We are in trouble if the parrot is talking and the hour is before 7 or after 20. 
Return True if we are in trouble.

parrot_trouble(True, 6) → True
parrot_trouble(True, 7) → False
parrot_trouble(False, 6) → False

Way#1
def parrot_trouble(talking, hour):
  for i in range(23):
    if talking:
      if hour < 7 or hour >=21:
        return True
      else:
        return False
    else:
      return False

Way#2
def parrot_trouble(talking, hour):
  trouble = hour < 7 or hour > 20
  if talking and trouble:
    return True
  else:
    return False
Way2.0
def parrot_trouble(talking, hour):
  qt = hour < 7 or hour > 20
  return talking and qt
    
Way#3
return talking and (hour < 7 or hour > 20)


Warmup1> makes10

Given 2 ints, a and b, return True if 
one if them is 10 or if their sum is 10.

makes10(9, 10) → True
makes10(9, 9) → False
makes10(1, 9) → True

Way#1
def makes10(a, b):
  if a == 10 or b == 10: 
    return True
  elif a + b == 10:
    return True
  else:
    return False
   
Way#2
return (a==10 or b==10 or a+b == 10)

Warmup1> near_hundred
Given an int n, return True if it is within 10 of 100 or 200. 
Note: abs(num) computes the absolute value of a number.


near_hundred(93) → True
near_hundred(90) → True
near_hundred(89) → False

Way#1
def near_hundred(n):
  if abs(100-n) <= 10:
    return True 
  elif abs(200-n) <= 10:
    return True
  else:
    return False
    
Way#2
def near_hundred(n):
  a = abs(100-n) <= 10
  b = abs(200-n) <= 10
  return (a or b)

Way#3
return ((abs(100 - n) <= 10) or (abs(200 - n) <= 10))
    
    
Warmup1 > pos_neg


Given 2 int values, return True if one is negative and one is positive. 
Except if the parameter "negative" is True, then return True only if both are negative.


pos_neg(1, -1, False) → True
pos_neg(-1, 1, False) → True
pos_neg(-4, -5, True) → True

Way#1
def pos_neg(a, b, negative):
  both = a<1 and b<1
  one = (a<0 and b>0) or (a>0 and b<0)
  if negative:
    return both 
  else:
    return one
    
Way2.0#
def pos_neg(a, b, negative):
  both = a<1 and b<1
  one = (a<0 and b>0) or (a>0 and b<0)
  return both if negative else one

Warmup1> not_string

Given a string, return a new string where "not " has been added to the front. 
However, if the string already begins with "not", return the string unchanged.

not_string('candy') → 'not candy'
not_string('x') → 'not x'
not_string('not bad') → 'not bad'

#if it has the word not then return str else return "not" + str
Way#1
def not_string(str):
  if str[0:3] == "not":
    return str
  return"not " + str
Way#2
def not_string(str):
  if leng(str) >= 3 and str[0:3] == "not":
    return str
  return"not " + str
    
Warmup1> missing_char


Given a non-empty string and an int n, return a new string where the char at index n has been removed. 
The value of n will be a valid index of a char in the original string 
(i.e. n will be in the range 0..len(str)-1 inclusive).

missing_char('kitten', 1) → 'ktten'
missing_char('kitten', 0) → 'itten'
missing_char('kitten', 4) → 'kittn'

# index string to remove n't position
Way#1
def missing_char(str, n):
  front = str[:n]
  back = str[n+1:]
  return front + back
Way#2
def missing_char(str, n):
  return str[:n] + str[n+1:]


Warmup1> front_back:

Given a string, return a new string where the first and last chars have been exchanged.

front_back('code') → 'eodc'
front_back('a') → 'a'
front_back('ab') → 'ba'

#first check for fail, then continue
Way#1
def front_back(str):
  if len(str) <= 1:
    return str
    
  start = str[0]
  mid = str[1:-1]
  end = str[-1]
  return end + mid + start


Warmup1> front 3
Given a string, we'll say that the front is the first 3 chars of the string. 
If the string length is less than 3, the front is whatever is there. 
Return a new string which is 3 copies of the front.


front3('Java') → 'JavJavJav'
front3('Chocolate') → 'ChoChoCho'
front3('abc') → 'abcabcabc'


def front3(str):
  if len(str) < 3:      #Test for fail here 
    return str*3
  
  front = str[:3]       #Other scenario
  return front*3
  





















